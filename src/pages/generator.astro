---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
const user = Astro.locals.user;

const locale = (Astro.locals.lang as "en" | "fr") ?? "en";
console.log("Locale in generator:", locale);
---

<Layout title={ui[locale].generator.title}>
    <div class="container mx-auto">
        <!-- Layout principal  -->
        <div class="flex w-full min-h-screen">
            <!-- Colonne de gauche -->
            <div
                id="svg-container"
                class="card bg-secondary-content rounded-lg p-6 flex-1"
            >
                <h2 class="text-2xl font-bold mb-4">
                    {ui[locale].generator.previewTitle}
                </h2>
                <p class="text-base-content/70 mb-4">
                    {ui[locale].generator.contentPlaceholder}
                </p>
            </div>

            <div class="divider divider-horizontal"></div>

            <!-- Colonne de droite -->
            <div
                id="svg-output"
                class="card bg-secondary-content rounded-lg p-6 flex-1"
            >
                <h2 class="text-2xl font-bold mb-4">
                    {ui[locale].generator.conversationTitle}
                </h2>
                <p class="text-base-content/70 mb-4"></p>
            </div>
        </div>

        <div class="mt-6 bg-base-200 rounded-lg p-4">
            <div class="flex flex-col sm:flex-row gap-2">
                <input
                    id="user-prompt"
                    type="text"
                    placeholder={locale === "fr"
                        ? "Tapez votre prompt ici..."
                        : "Type your prompt here..."}
                    class="input input-bordered w-full"
                />
            </div>
        </div>

        <button
            id="generate-button"
            class="btn btn-soft btn-secondary w-full sm:w-auto"
            >{ui[locale].generator.generateButton}</button
        >
        <input
            id="svg-name"
            type="text"
            placeholder={ui[locale].generator.svgNamePlaceholder}
            class="input input-bordered w-full sm:w-auto"
        />
        <button id="save-button" class="btn btn-secondary w-full sm:w-auto"
            >{ui[locale].generator.saveButton}</button
        >

        <button class="btn btn-secondary m-2" id="edit-button"
            >{ui[locale].generator.editButton}</button
        >
    </div>

    <div
        id="chat-history"
        class="flex flex-col gap-4 w-full mb-20 overflow-y-auto flex-grow"
    >
        <script></script>
    </div>
</Layout>

<script>
    //@ts-nocheck
    let promptList = [];
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    async function generateSVG(prompt) {
        console.log("Generating SVG for prompt:", prompt);
        const res = await fetch("/api/generateSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(prompt),
        });
        const data = await res.json();
        return data.svg;
    }

    // const editButton1 = document.getElementById("edit-button");

    async function handleEdit() {
        let prompt = "";
        let aiResponse = "";
        const promptElement = document.getElementById("user-prompt");
        prompt = promptElement ? promptElement.value : "";
        console.log("Prompt soumis : ", prompt);
        // Ajout du prompt de l'utilisateur à la liste
        promptList.push({ role: "user", content: prompt });
        const svgContainer = document.getElementById("svg-container");
        // Afficher un spinner de chargement
        svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
        generateButton.disabled = true;
        editButton.disabled = true;
        let svgOutput = document.getElementById("svg-output");
        // Appeler la fonction pour générer le SVG
        aiResponse = await generateSVG(promptList);
        // Extraire le SVG de la réponse
        const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";
        console.log("Code SVG généré : ", aiResponse.content);
        // Ajouter la réponse de l'IA à la liste des prompts
        promptList.push(aiResponse);
        // Afficher le SVG généré
        svgOutput.textContent = aiResponse.content;
        svgContainer.innerHTML = aiResponse.content;
        // Réactiver les boutons
        generateButton.disabled = false;
        editButton.disabled = false;
        console.log("Historique des prompts : ", promptList);
    }

    if (editButton) {
        editButton.addEventListener("click", handleEdit);
    }

    // const saveButton = document.getElementById("save-button");
    //     async function saveSVG(params) {
    //         const res = await fetch("/api/saveSVG", {
    //             method: "POST",
    //             headers: { "Content-Type": "application/json" },
    //             body: JSON.stringify(params),
    //         });
    //         const data = await res.json();
    //         return data;
    //     }
    //     if (saveButton) {
    //         saveButton.addEventListener("click", async () => {
    //             const name = prompt("Entrez un nom pour le SVG :");
    //             const svgOutput = document.getElementById("svg-output")?.textContent;
    //             console.log("Sauvegarde du SVG : ", JSON.stringify(svgOutput));

    //             const params = {
    //                 nom: name,
    //                 code_svg: svgOutput || "<svg></svg>",
    //                 chat_history: JSON.stringify(promptList),
    //             };
    //             await saveSVG(params);
    //         });
    //     }

    // Fonction utilitaire pour sauvegarder le SVG
    const saveButton = document.getElementById("save-button");

    async function saveSVG(params) {
        // Envoi de la requête à notre endpoint
        const res = await fetch("/api/saveSVG", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(params),
        });
        return await res.json();
    }

    // Gestionnaire d'événements pour le bouton de sauvegarde
    if (saveButton) {
        saveButton.addEventListener("click", async () => {
            const user = JSON.parse(localStorage.getItem("user") || "null");

            if (!user || !user.id) {
                alert(
                    locale === "fr"
                        ? "Vous devez être connecté pour sauvegarder un SVG"
                        : "You must be logged in to save an SVG",
                );
                return;
            }

            // Demande du nom du SVG à l'utilisateur
            const name = prompt(
                locale === "fr"
                    ? "Donnez un nom à votre création :"
                    : "Give a name to your creation:",
            );

            if (!name) return; // L'utilisateur a annulé

            const svgOutput =
                document.getElementById("svg-output")?.textContent;
            console.log(
                "Préparation de la sauvegarde :",
                JSON.stringify(svgOutput),
            );

            // Préparation des données pour la sauvegarde
            const params = {
                nom: name,
                code_svg: svgOutput || "<svg></svg>", // SVG par défaut si vide
                chat_history: JSON.stringify(promptList), // Historique des échanges
                user: user.id, // Associer le SVG à l'utilisateur connecté
            };

            // Sauvegarde et gestion de la réponse
            const result = await saveSVG(params);
            if (result.success) {
                alert(
                    locale === "fr"
                        ? "SVG sauvegardé avec succès !"
                        : "SVG saved successfully!",
                );
            } else {
                alert(
                    (locale === "fr"
                        ? "Erreur lors de la sauvegarde : "
                        : "Error while saving: ") + result.error,
                );
            }
        });
    }
</script>
